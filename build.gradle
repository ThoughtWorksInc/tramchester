buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:2.1.0'
    }
}

plugins {
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}

apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'

mainClassName = 'com.tramchester.App'

def candidate = System.getenv("CIRCLE_BUILD_NUM") ?: "0"
// override build number if RELEASE_NUMBER set, needed because of way circle ci workflows operate
def buildNumber = System.getenv("RELEASE_NUMBER") ?: candidate
def environment = System.getenv("ENV") ?: "Dev"
def isWindows = System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')

// this is used in the generated dist zip filename
version = 1.0

project.ext {
    dropwizardVersion = '1.3.15'
}

repositories {
    maven {
        url "http://download.osgeo.org/webdav/geotools/"
    }
    mavenCentral()
    maven {
        url "http://maven.geo-solutions.it"
    }

    maven {
        url "https://raw.github.com/neo4j-contrib/m2/master/releases"
    }

}

dependencies {
    compile('io.dropwizard:dropwizard-core:' + dropwizardVersion) { exclude group: 'asm', module: 'asm' }
    compile('io.dropwizard:dropwizard-assets:' + dropwizardVersion) { exclude group: 'asm', module: 'asm' }
    compile 'org.picocontainer:picocontainer:2.14.3',
            'org.neo4j:neo4j:3.4.12',
            'org.neo4j:neo4j-slf4j:3.4.12',
            'org.neo4j:neo4j-spatial:0.26.2-neo4j-3.4.12', //v0.26.2 for Neo4j 3.4.12
            'net.lingala.zip4j:zip4j:2.1.4',
            'commons-io:commons-io:2.4',
            'org.apache.commons:commons-csv:1.7',
            'org.apache.httpcomponents:httpclient:4.5.1',
            'org.apache.commons:commons-collections4:4.1',
            'com.javadocmd:simplelatlng:1.3.1',
            'com.amazonaws:aws-java-sdk-cloudwatch:1.11.449',
            'com.amazonaws:aws-java-sdk-s3:1.11.449',
            'com.smoketurner:dropwizard-swagger:1.1.1-1',
            'io.dropwizard-bundles:dropwizard-configurable-assets-bundle:1.0.5'

    testCompile 'junit:junit:4.12',
            'org.assertj:assertj-core:1.2.0',
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion,
            'org.easymock:easymock:3.4',
            'org.seleniumhq.selenium:selenium-java:3.141.59',
            'io.appium:java-client:4.1.2',
            'org.hamcrest:hamcrest:2.1'

    dependencies {
        // JAX-B dependencies for JDK 9+
        implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.2"
        implementation "org.glassfish.jaxb:jaxb-runtime:2.3.2"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['main/src']
        }
    }
    test {
        java {
            srcDirs = ['main/test']
        }
        resources.srcDir file('main/test/resources')
    }
}

processResources {
    exclude('**/app/javascript') // dist via webpack
}

task cfnassist {
    doLast {
        ant.taskdef(name: 'cfnassist', classname: 'tw.com.ant.CfnAssistAntTask') {
            classpath {
                fileset(dir: 'lib/cfnassist-1.1.37/lib/', includes: 'cfnassist-all-1.1.37.jar')
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.compilerArgs.addAll(['-Xlint'])
}

task stage(dependsOn: ['clean', 'installApp'])

task cleanGraph {
    delete 'int_test_tramchester.db' , 'int_test_bus_tramchester.db', 'perf_test_tramchester.db'
}

clean {
    delete 'src/main/resources/app/dist/main.js'
    delete 'src/main/resources/app/dist/map.js'
    delete 'data/tram/data.zip', 'data/bus/data.zip'
    delete fileTree('data/tram') {
        include '*.txt'
    }
    delete fileTree('data/tram/gtdf-out') {
        include '*.txt'
    }
    delete 'data/tram/gtdf-out'
    delete fileTree('data/bus') {
        include '*.txt'
    }
    delete fileTree('data/all') {
        include '*.txt'
    }
    cleanGraph
}

run {
    dependsOn 'webpack'
    args 'server', 'config/local.yml'
}

task pullData(type:JavaExec, dependsOn:classes) {
    main = 'com.tramchester.dataimport.FetchDataFromUrl'
    classpath = sourceSets.main.runtimeClasspath
    args 'http://odata.tfgm.com/opendata/downloads/TfGMgtfs.zip', 'data', 'tramData-1.0.zip'
}

task allowhost(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

task blockhost(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            BlackList(port: '443', tag: 'web')
        }
    }
}

task buses(type:JavaExec) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    args 'server', 'config/buses.yml'
}

task busTest(type: Test) {
    useJUnit {
        includeCategories 'com.tramchester.BusTest'
    }
}

task unit(type: Test, dependsOn: compileJava) {
    useJUnit {
        filter {
            includeTestsMatching "com.tramchester.unit.*"
        }
        testLogging {
            exceptionFormat "full" // default is "short"
            events "passed", "skipped", "failed", "started",  "standardError"
        }
        reports {
            junitXml.enabled = true
            html.enabled = true
        }
    }
}

task ci_unit(type: Test) {
    dependsOn 'allowhost'
    dependsOn 'compileJava'
    useJUnit {
        filter {
            includeTestsMatching "com.tramchester.unit.*"
        }
        testLogging {
            exceptionFormat "full" // default is "short"
            events "passed", "skipped", "failed", "started",  "standardError"
        }
    }
    finalizedBy {
        blockhost
    }
}

task integration(type: Test, dependsOn: compileJava) {
    minHeapSize = "2000m"
    maxHeapSize = "3000m"
    useJUnit {
        filter {
            includeTestsMatching "com.tramchester.integration.*"
            excludeCategories "com.tramchester.LiveDataMessagesCategory" // hopefully temporary exclusion
        }
        testLogging {
            exceptionFormat "full" // default is "short"
            events "passed", "skipped", "failed", "started" //, "standardError", "standardOut"
        }
        forkEvery 5
    }
}

task appium(type: Test) {
    dependsOn 'allowhost'
    dependsOn 'compileJava'
    dependsOn 'webpack'
    useJUnit {
        filter {
            includeTestsMatching "com.tramchester.acceptance.*"
        }
        testLogging {
            exceptionFormat "full" // default is "short"
            events "passed", "skipped", "failed", "started", "standardError", "standardOut"
        }
    }
    finalizedBy {
        blockhost
    }
}

task localAppium(type: Test) {
    dependsOn 'webpack'
    dependsOn 'compileJava'
    useJUnit {
        filter {
            includeTestsMatching "com.tramchester.acceptance.*"
        }
        testLogging {
            events "passed", "skipped", "failed", "started", "standardError", "standardOut"
        }
    }
}

task uploadData(dependsOn: ['cfnassist', 'pullData']) {
    doLast {
        ant.cfnassist(buildNumber: buildNumber, bucketname: 'tramchester2dist') {
            Artifact(name: 'data', value: 'data/tramData-1.0.zip')
            S3Create()
        }
    }
}

task diagrams(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist() {
            Diagrams(target: '.')
        }
    }
}

task npmInstall(type: Exec) {
    inputs.file("package.json")
    outputs.dir("node_modules")

    if (isWindows) {
        commandLine "npm.cmd", "install"
    }
    else {
        commandLine "npm", "install"
    }
}

jar {
    dependsOn 'webpack'
    into 'app', {
        from 'src/main/resources/app'
    }
}

task webpack(type: Exec, dependsOn: npmInstall) {
    inputs.file("src/main/resources/app/index.html")
    inputs.dir("src/main/resources/app/javascript")
    inputs.dir("src/main/resources/app/css")
    inputs.file("webpack.config.js")

    outputs.file("src/main/resources/app/dist/main.js")
    outputs.file("src/main/resources/app/dist/map.js")

    if (isWindows) {
        commandLine "./node_modules/.bin/webpack.cmd"
    } else {
        commandLine "./node_modules/.bin/webpack"
    }
}

distZip {
    into('config') {
        from 'config'
    }
}

task uploadApp(dependsOn: ['cfnassist', 'distZip', 'uploadSupportFiles'])  {
    doLast {
        ant.cfnassist(buildNumber: buildNumber, bucketname: 'tramchester2dist') {
            Artifact(name: 'package', value: 'build/distributions/tramchester-1.0.zip')
            S3Create()
        }
    }
}

task uploadSupportFiles(dependsOn: 'cfnassist') {
    doLast {
        ant.cfnassist(buildNumber: buildNumber, bucketname: 'tramchester2dist') {
            Artifact(name: 'install', value: 'deploy/setupTramWebServer.sh')
            Artifact(name: 'cloudinit', value: 'deploy/cloudInit.txt')
            Artifact(name: 'install', value: 'deploy/setupTramWebServerAWSLinux.sh')
            Artifact(name: 'cloudinit', value: 'deploy/cloudInitAWSLinux.txt')
            S3Create()
        }
    }
}

task infra(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, sns: 'true', capabilityIAM: 'true') {
            Templates(target: 'deploy/infra/'+environment )
        }
    }
}

task upload(dependsOn: ['uploadData', 'uploadApp'])

task deploy(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            Templates(target: 'deploy/servers.json')
        }
    }
}

task updateLB(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment, buildNumber: buildNumber, sns: 'true') {
            ELBUpdate(typeTag: 'web')
        }
    }
}

task tidy(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: environment) {
            TidyStacks(target: 'deploy/servers.json', typeTag: 'web')
        }
    }
}

task allowHostDev(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'Dev') {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

task blockHostDev(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'Dev') {
            BlackList(port: '443', tag: 'web')
        }
    }
}

task whitelistUAT(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'UAT') {
            WhiteList(port: '443', tag: 'web')
        }
    }
}

task blacklistUAT(dependsOn: cfnassist) {
    doLast {
        ant.cfnassist(project: 'tramchesterB', env: 'UAT') {
            BlackList(port: '443', tag: 'web')
        }
    }
}






